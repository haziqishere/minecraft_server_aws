name: "Deploy Prefect Orchestration"

on:
  push:
    branches: [ "main" ]
    paths:
      - 'prefect/**'
      - '.github/workflows/main.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - update
          - restart
          - logs

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-southeast-1' }}

jobs:
  build_and_push:
    name: "Build and Push Prefect Image"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: ./prefect
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kroni-prefect:latest

  deploy:
    name: "Deploy to Prefect Instance"
    needs: [build_and_push]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Get the Prefect instance IP from AWS
      - name: Get Prefect instance IP
        id: prefect_ip
        run: |
          PREFECT_IP=$(aws lightsail get-instance \
            --instance-name kroni-survival-prefect-orchestration \
            --query 'instance.publicIpAddress' \
            --output text)
          echo "PREFECT_IP=$PREFECT_IP" >> $GITHUB_ENV
      
      # Setup SSH for connecting to the instance
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem
          chmod 600 ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem
          ssh-keyscan -H ${{ env.PREFECT_IP }} >> ~/.ssh/known_hosts
      
      # Prepare the Prefect instance
      - name: Prepare Instance
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} 'mkdir -p ~/prefect/flows'
      
      # Copy files to the Prefect instance
      - name: Copy Files
        run: |
          scp ./prefect/Dockerfile ./prefect/docker-compose.yaml ec2-user@${{ env.PREFECT_IP }}:~/prefect/
          scp ./prefect/deploy_prefect.sh ec2-user@${{ env.PREFECT_IP }}:~/prefect/
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} 'chmod +x ~/prefect/deploy_prefect.sh'
          scp -r ./prefect/flows/* ec2-user@${{ env.PREFECT_IP }}:~/prefect/flows/
      
      # Install Docker and Docker Compose if needed
      - name: Install Docker if needed
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} '
            if ! command -v docker &> /dev/null; then
              sudo amazon-linux-extras install docker -y
              sudo service docker start
              sudo usermod -a -G docker ec2-user
              sudo systemctl enable docker
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          '
      
      # Deploy or update depending on the action
      - name: Execute Deployment
        run: |
          if [ "${{ github.event.inputs.action }}" == "logs" ]; then
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && ./deploy_prefect.sh logs'
          elif [ "${{ github.event.inputs.action }}" == "restart" ]; then
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && ./deploy_prefect.sh deploy'
          elif [ "${{ github.event.inputs.action }}" == "update" ]; then
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && ./deploy_prefect.sh update'
          else
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && ./deploy_prefect.sh deploy'
          fi
      
      # Check status after deployment
      - name: Check Status
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && ./deploy_prefect.sh status'
          
      # Output URL for Prefect UI
      - name: Output Prefect UI URL
        run: |
          echo "Prefect UI available at: http://${{ env.PREFECT_IP }}:4200"

  setup_flows:
    name: "Configure Prefect Flows"
    needs: [deploy]
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'logs'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Get Prefect instance IP
        run: |
          PREFECT_IP=$(aws lightsail get-instance \
            --instance-name kroni-survival-prefect-orchestration \
            --query 'instance.publicIpAddress' \
            --output text)
          echo "PREFECT_IP=$PREFECT_IP" >> $GITHUB_ENV
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem
          chmod 600 ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem
          ssh-keyscan -H ${{ env.PREFECT_IP }} >> ~/.ssh/known_hosts
      
      # Wait for Prefect to start
      - name: Wait for Prefect Server
        run: |
          echo "Waiting for Prefect server to start..."
          sleep 30
      
      # Register deployments
      - name: Register Deployments
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server bash -c 'cd /opt/prefect/flows && prefect deployment build backup_flow.py:backup_flow -n scheduled-backup -q default --apply'"
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server bash -c 'cd /opt/prefect/flows && prefect deployment build server_monitoring_flow.py:server_monitoring_flow -n server-monitoring -q default --apply'"
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server bash -c 'cd /opt/prefect/flows && prefect deployment build snapshot_flow.py:snapshot_flow -n snapshot-flow -q default --apply'"
      
      # Set up schedules
      - name: Setup Schedules
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server prefect deployment set-schedule backup_flow/scheduled-backup --cron '0 0 */3 * *'"
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server prefect deployment set-schedule server_monitoring_flow/server-monitoring --cron '0 */4 * * *'"
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }}.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server prefect deployment set-schedule snapshot_flow/snapshot-flow --cron '0 0 1 * *'"
