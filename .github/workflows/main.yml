name: "Deploy Prefect Orchestration"

on:
  push:
    branches: [ "main" ]
    paths:
      - 'prefect/**'
      - '!prefect/flows/**'  # Exclude flows directory since it's handled by update_prefect_flows.yml
      - '.github/workflows/main.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - update
          - restart
          - logs
      prefect_ip:
        description: 'IP address of the Prefect instance'
        required: true
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-southeast-1' }}

jobs:
  build_and_push:
    name: "Build and Push Prefect Image"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: ./prefect
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/custom-prefect:latest

  deploy:
    name: "Deploy to Prefect Instance"
    needs: [build_and_push]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Get the Prefect instance IP from workflow input or AWS
      - name: Get Prefect instance IP
        id: prefect_ip
        run: |
          if [ -n "${{ github.event.inputs.prefect_ip }}" ]; then
            # Use the provided IP from workflow input
            PREFECT_IP="${{ github.event.inputs.prefect_ip }}"
            echo "Using provided Prefect IP: $PREFECT_IP"
          else
            echo "No Prefect IP provided, attempting to get from Terraform..."
            
            # Setup Terraform
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install -y terraform
            
            # Initialize Terraform
            cd terraform
            echo "Initializing Terraform..."
            terraform init -input=false
            
            # Get IP from Terraform output with error handling
            echo "Getting Prefect IP from Terraform output..."
            if ! PREFECT_IP=$(terraform output -raw prefect_orchestration_ip 2>/dev/null); then
              echo "Failed to get Prefect IP from Terraform output."
              echo "::error::Failed to get Prefect IP from Terraform. Please provide an IP address manually."
              exit 1
            fi
            
            # Validate the IP
            if [ -z "$PREFECT_IP" ]; then
              echo "Prefect IP from Terraform is empty."
              echo "::error::Prefect IP from Terraform is empty. Please provide an IP address manually."
              exit 1
            fi
            
            echo "Retrieved Prefect IP from Terraform: $PREFECT_IP"
            cd ..
          fi
          
          # Output the IP for debugging
          echo "Using Prefect IP: $PREFECT_IP"
          
          # Set output parameter and environment variable
          echo "prefect_ip=$PREFECT_IP" >> $GITHUB_OUTPUT
          echo "PREFECT_IP=$PREFECT_IP" >> $GITHUB_ENV
      
      # Setup SSH for connecting to the instance
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          chmod 600 ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          ssh-keyscan -H ${{ env.PREFECT_IP }} >> ~/.ssh/known_hosts
      
      # Prepare the Prefect instance
      - name: Prepare Instance
        run: |
          echo "Connecting to instance at ${{ env.PREFECT_IP }} to prepare directories..."
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} 'mkdir -p ~/prefect/flows'
      
      # Copy files to the Prefect instance
      - name: Copy Files
        run: |
          echo "Copying files to ${{ env.PREFECT_IP }}..."
          scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ./prefect/Dockerfile ./prefect/docker-compose.yaml ec2-user@${{ env.PREFECT_IP }}:~/prefect/
          scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ./prefect/deploy_prefect.sh ec2-user@${{ env.PREFECT_IP }}:~/prefect/
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'chmod +x ~/prefect/deploy_prefect.sh'
          scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} -r ./prefect/flows/* ec2-user@${{ env.PREFECT_IP }}:~/prefect/flows/
          
          # Copy requirements.txt
          if [ -f ./prefect/requirements.txt ]; then
            scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ./prefect/requirements.txt ec2-user@${{ env.PREFECT_IP }}:~/prefect/
          fi
      
      # Install Docker and Docker Compose if needed
      - name: Install Docker if needed
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} '
            if ! command -v docker &> /dev/null; then
              sudo amazon-linux-extras install docker -y
              sudo service docker start
              sudo usermod -a -G docker ec2-user
              sudo systemctl enable docker
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          '
      
      # Deploy or update depending on the action
      - name: Execute Deployment
        run: |
          echo "Executing deployment action on ${{ env.PREFECT_IP }}..."
          if [ "${{ github.event.inputs.action }}" == "logs" ]; then
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && ./deploy_prefect.sh logs'
          elif [ "${{ github.event.inputs.action }}" == "restart" ]; then
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} ./deploy_prefect.sh restart'
          elif [ "${{ github.event.inputs.action }}" == "update" ]; then
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} ./deploy_prefect.sh update'
          else
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} ./deploy_prefect.sh deploy'
          fi
      
      # Check status after deployment
      - name: Check Status
        run: |
          echo "Checking status on ${{ env.PREFECT_IP }}..."
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && ./deploy_prefect.sh status'
          
      # Output URL for Prefect UI
      - name: Output Prefect UI URL
        run: |
          echo "Prefect UI available at: http://${{ env.PREFECT_IP }}:4200"

  setup_flows:
    name: "Configure Prefect Flows"
    needs: [deploy]
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'logs'
    outputs:
      prefect_ip: ${{ steps.get_ip.outputs.prefect_ip }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Get the Prefect instance IP from workflow input or AWS
      - name: Get Prefect instance IP
        id: get_ip
        run: |
          if [ -n "${{ github.event.inputs.prefect_ip }}" ]; then
            # Use the provided IP from workflow input
            PREFECT_IP="${{ github.event.inputs.prefect_ip }}"
            echo "Using provided Prefect IP: $PREFECT_IP"
          else
            echo "No Prefect IP provided, attempting to get from Terraform..."
            
            # Setup Terraform
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install -y terraform
            
            # Initialize Terraform
            cd terraform
            echo "Initializing Terraform..."
            terraform init -input=false
            
            # Get IP from Terraform output with error handling
            echo "Getting Prefect IP from Terraform output..."
            if ! PREFECT_IP=$(terraform output -raw prefect_orchestration_ip 2>/dev/null); then
              echo "Failed to get Prefect IP from Terraform output."
              echo "::error::Failed to get Prefect IP from Terraform. Please provide an IP address manually."
              exit 1
            fi
            
            # Validate the IP
            if [ -z "$PREFECT_IP" ]; then
              echo "Prefect IP from Terraform is empty."
              echo "::error::Prefect IP from Terraform is empty. Please provide an IP address manually."
              exit 1
            fi
            
            echo "Retrieved Prefect IP from Terraform: $PREFECT_IP"
            cd ..
          fi
          
          # Output the IP for debugging
          echo "Using Prefect IP: $PREFECT_IP"
          
          # Set output parameter and environment variable
          echo "prefect_ip=$PREFECT_IP" >> $GITHUB_OUTPUT
          echo "PREFECT_IP=$PREFECT_IP" >> $GITHUB_ENV
      
      # Move SSH setup BEFORE any SSH commands
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          chmod 600 ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          echo "Setting up SSH connection to ${{ env.PREFECT_IP }}..."
          ssh-keyscan -H ${{ env.PREFECT_IP }} >> ~/.ssh/known_hosts
      
      # Wait for Prefect Server
      - name: Wait for Prefect Server
        run: |
          echo "Waiting for Prefect server at ${{ env.PREFECT_IP }} to be ready..."
          # Wait for container to be ready (max 120 seconds)
          for i in {1..24}; do
            if ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server python -c \"import urllib.request; urllib.request.urlopen('http://0.0.0.0:4200/api/health')\" 2>/dev/null"; then
              echo "Prefect server is running and healthy"
              break
            fi
            
            echo "Waiting for Prefect server to be ready... Attempt $i/24"
            
            # Show logs after 5 attempts
            if [ $i -eq 5 ]; then
              echo "Server still starting up, checking logs:"
              ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "docker logs prefect-server --tail=20"
            fi
            
            sleep 5
          done
      
      # Set proper API URL configuration
      - name: Configure Prefect API URL
        run: |
          echo "Setting Prefect API URL to use public IP..."
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            docker exec prefect-server bash -c 'prefect config set PREFECT_API_URL=http://${{ env.PREFECT_IP }}:4200/api'
            echo 'PREFECT_API_URL configuration set to http://${{ env.PREFECT_IP }}:4200/api'
          "
      
      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          echo "Installing Python dependencies in Prefect containers..."
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            if [ -f ~/prefect/requirements.txt ]; then
              echo 'Installing dependencies in prefect-server container...'
              docker cp ~/prefect/requirements.txt prefect-server:/tmp/requirements.txt
              docker exec prefect-server pip install -r /tmp/requirements.txt
              
              echo 'Installing dependencies in prefect-worker container...'
              docker cp ~/prefect/requirements.txt prefect-worker:/tmp/requirements.txt
              docker exec prefect-worker pip install -r /tmp/requirements.txt
              
              echo 'Dependencies installed successfully'
            else
              echo 'requirements.txt not found, skipping dependency installation'
            fi
          "
      
      - name: Register Prefect Deployments
        run: |
          echo "Registering Prefect deployments on ${{ env.PREFECT_IP }}..."
          # Create work pool if needed
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            docker exec prefect-server bash -c 'prefect work-pool create default -t process || echo \"Work pool already exists\"'
          "
          
          # Register each flow
          for flow_file in prefect/flows/*.py; do
            if [[ "$flow_file" != *"__init__.py"* && "$flow_file" != *"__pycache__"* ]]; then
              flow_name=$(basename "$flow_file")
              
              # Copy the flow file to the server
              echo "Copying $flow_name to ${{ env.PREFECT_IP }}..."
              scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} "$flow_file" ec2-user@${{ env.PREFECT_IP }}:~/prefect/flows/
              
              # Find flow functions with improved pattern
              flow_funcs=$(grep -E "@flow(\([^)]*\))?\s*\n*\s*def\s+([a-zA-Z0-9_]+)" "$flow_file" | grep -o "def\s\+[a-zA-Z0-9_]\+" | cut -d ' ' -f2)
              
              if [ -z "$flow_funcs" ]; then
                echo "Warning: No flow functions found in $flow_name, skipping..."
                continue
              fi
              
              # Deploy each flow function
              for flow_func in $flow_funcs; do
                echo "Deploying $flow_name:$flow_func on ${{ env.PREFECT_IP }}..."
                ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
                  docker exec prefect-server bash -c 'cd /opt/prefect/flows && prefect deploy $flow_name:$flow_func -n $flow_func-deployment --pool default'
                "
              done
            fi
          done
          
          # Start worker if needed
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            if ! docker ps | grep -q prefect-worker; then
              echo \"Starting worker...\"
              docker-compose up -d prefect-worker
            fi
          "
