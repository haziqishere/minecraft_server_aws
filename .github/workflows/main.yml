name: "Deploy Prefect Orchestration"

on:
  push:
    branches: [ "main" ]
    paths:
      - 'prefect/**'
      - '.github/workflows/main.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - update
          - restart
          - logs
      prefect_ip:
        description: 'IP address of the Prefect instance'
        required: true
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-southeast-1' }}

jobs:
  build_and_push:
    name: "Build and Push Prefect Image"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: ./prefect
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/custom-prefect:latest

  deploy:
    name: "Deploy to Prefect Instance"
    needs: [build_and_push]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Get the Prefect instance IP from workflow input or AWS
      - name: Get Prefect instance IP
        id: prefect_ip
        run: |
          if [ -n "${{ github.event.inputs.prefect_ip }}" ]; then
            # Use the provided IP from workflow input
            PREFECT_IP="${{ github.event.inputs.prefect_ip }}"
          else
            # Setup Terraform
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install -y terraform
            
            # Initialize Terraform
            terraform -chdir=./terraform init -input=false
            
            # Get IP from Terraform output
            PREFECT_IP=$(terraform -chdir=./terraform output -raw prefect_orchestration_ip)
          fi
          echo "PREFECT_IP=$PREFECT_IP" >> $GITHUB_ENV
          echo "Prefect instance IP: $PREFECT_IP"
      
      # Setup SSH for connecting to the instance
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          chmod 600 ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          ssh-keyscan -H ${{ env.PREFECT_IP }} >> ~/.ssh/known_hosts
      
      # Prepare the Prefect instance
      - name: Prepare Instance
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} 'mkdir -p ~/prefect/flows'
      
      # Copy files to the Prefect instance
      - name: Copy Files
        run: |
          scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ./prefect/Dockerfile ./prefect/docker-compose.yaml ec2-user@${{ env.PREFECT_IP }}:~/prefect/
          scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ./prefect/deploy_prefect.sh ec2-user@${{ env.PREFECT_IP }}:~/prefect/
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'chmod +x ~/prefect/deploy_prefect.sh'
          scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} -r ./prefect/flows/* ec2-user@${{ env.PREFECT_IP }}:~/prefect/flows/
      
      # Install Docker and Docker Compose if needed
      - name: Install Docker if needed
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} '
            if ! command -v docker &> /dev/null; then
              sudo amazon-linux-extras install docker -y
              sudo service docker start
              sudo usermod -a -G docker ec2-user
              sudo systemctl enable docker
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          '
      
      # Deploy or update depending on the action
      - name: Execute Deployment
        run: |
          if [ "${{ github.event.inputs.action }}" == "logs" ]; then
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && ./deploy_prefect.sh logs'
          elif [ "${{ github.event.inputs.action }}" == "restart" ]; then
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} ./deploy_prefect.sh restart'
          elif [ "${{ github.event.inputs.action }}" == "update" ]; then
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} ./deploy_prefect.sh update'
          else
            ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} ./deploy_prefect.sh deploy'
          fi
      
      # Check status after deployment
      - name: Check Status
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} 'cd ~/prefect && ./deploy_prefect.sh status'
          
      # Output URL for Prefect UI
      - name: Output Prefect UI URL
        run: |
          echo "Prefect UI available at: http://${{ env.PREFECT_IP }}:4200"

  setup_flows:
    name: "Configure Prefect Flows"
    needs: [deploy]
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'logs'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Get the Prefect instance IP from workflow input or AWS
      - name: Get Prefect instance IP
        id: prefect_ip
        run: |
          if [ -n "${{ github.event.inputs.prefect_ip }}" ]; then
            # Use the provided IP from workflow input
            PREFECT_IP="${{ github.event.inputs.prefect_ip }}"
          else
            # Setup Terraform
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install -y terraform
            
            # Initialize Terraform
            terraform -chdir=./terraform init -input=false
            
            # Get IP from Terraform output
            PREFECT_IP=$(terraform -chdir=./terraform output -raw prefect_orchestration_ip)
          fi
          echo "PREFECT_IP=$PREFECT_IP" >> $GITHUB_ENV
          echo "Prefect instance IP: $PREFECT_IP"
      
      # Move SSH setup BEFORE any SSH commands
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          chmod 600 ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          ssh-keyscan -H ${{ env.PREFECT_IP }} >> ~/.ssh/known_hosts
      
      # Wait for Prefect Server
      - name: Wait for Prefect Server
        run: |
          # Wait for container to be ready (max 120 seconds)
          for i in {1..24}; do
            if ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server curl -s http://localhost:4200/api/health | grep -q 'ok'"; then
              echo "Prefect server is running and healthy"
              break
            fi
            
            echo "Waiting for Prefect server to be ready... Attempt $i/24"
            
            # Show logs after 5 attempts
            if [ $i -eq 5 ]; then
              echo "Server still starting up, checking logs:"
              ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "docker logs prefect-server --tail=20"
            fi
            
            sleep 5
          done
      
      - name: Register Prefect Deployments
        run: |
          # Create work pool if needed
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            docker exec prefect-server bash -c 'prefect work-pool create default -t process || echo \"Work pool already exists\"'
          "
          
          # Register each flow
          for flow_file in prefect/flows/*.py; do
            if [[ "$flow_file" != *"__init__.py"* && "$flow_file" != *"__pycache__"* ]]; then
              flow_name=$(basename "$flow_file")
              
              # Copy the flow file to the server
              scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} "$flow_file" ec2-user@${{ env.PREFECT_IP }}:~/prefect/flows/
              
              # Find flow functions in the file
              flow_funcs=$(grep -o "@flow.*def \w\+" "$flow_file" | awk '{print $NF}')
              
              if [ -z "$flow_funcs" ]; then
                echo "Warning: No flow functions found in $flow_name, skipping..."
                continue
              fi
              
              # Deploy each flow function
              for flow_func in $flow_funcs; do
                echo "Deploying $flow_name:$flow_func"
                ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
                  docker exec prefect-server bash -c 'cd /opt/prefect/flows && prefect deploy $flow_name:$flow_func -n $flow_func-deployment --pool default'
                "
              done
            fi
          done
          
          # Start worker if needed
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            if ! docker ps | grep -q prefect-worker; then
              echo \"Starting worker...\"
              docker-compose up -d prefect-worker
            fi
          "
