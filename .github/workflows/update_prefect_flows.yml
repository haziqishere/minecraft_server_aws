name: "Update Prefect Flows"

on:
  push:
    branches: [ "main" ]
    paths:
      - 'prefect/flows/**'
  workflow_dispatch:
    inputs:
      prefect_ip:
        description: 'IP address of the Prefect instance'
        required: false
        type: string
      flow_to_update:
        description: 'Specific flow to update (leave empty to update all flows)'
        required: false
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-southeast-1' }}

jobs:
  update_flows:
    name: "Update Prefect Flows"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Get the Prefect instance IP from workflow input or AWS
      - name: Get Prefect instance IP
        id: prefect_ip
        run: |
          if [ -n "${{ github.event.inputs.prefect_ip }}" ]; then
            # Use the provided IP from workflow input
            PREFECT_IP="${{ github.event.inputs.prefect_ip }}"
          else
            # Setup Terraform
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install -y terraform
            
            # Initialize Terraform
            cd terraform
            terraform init -input=false
            
            # Get IP from Terraform output
            PREFECT_IP=$(terraform output -raw prefect_orchestration_ip 2>/dev/null || echo "")
            cd ..
          fi
          
          if [ -z "$PREFECT_IP" ]; then
            echo "Could not determine Prefect instance IP"
            exit 1
          fi
          
          # Output the IP for debugging
          echo "Using Prefect IP: $PREFECT_IP"
          
          # Set output parameter and environment variables
          echo "prefect_ip=$PREFECT_IP" >> $GITHUB_OUTPUT
          echo "PREFECT_IP=$PREFECT_IP" >> $GITHUB_ENV
          echo "PREFECT_HOST=$PREFECT_IP" >> $GITHUB_ENV
          echo "Prefect instance IP: $PREFECT_IP"
      
      # Setup SSH for connecting to the instance
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          chmod 600 ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          ssh-keyscan -H ${{ env.PREFECT_IP }} >> ~/.ssh/known_hosts
      
      # Identify changed files if no specific flow is specified
      - name: Identify changed flows
        id: changed_flows
        run: |
          if [ -n "${{ github.event.inputs.flow_to_update }}" ]; then
            echo "Specific flow to update: ${{ github.event.inputs.flow_to_update }}"
            FLOW_FILES="prefect/flows/${{ github.event.inputs.flow_to_update }}"
          else
            # Get list of changed files in the prefect/flows directory
            git fetch origin
            BASE_SHA=$(git merge-base origin/main HEAD)
            FLOW_FILES=$(git diff --name-only $BASE_SHA HEAD | grep "^prefect/flows/.*\.py$" || echo "")
            if [ -z "$FLOW_FILES" ]; then
              echo "No flow files changed"
              # Still continue to make sure setup works
              FLOW_FILES="prefect/flows/*.py"
            fi
          fi
          
          echo "FLOW_FILES=$FLOW_FILES" >> $GITHUB_ENV
          echo "Flow files to update: $FLOW_FILES"
      
      # Copy only the changed flow files to the Prefect instance
      - name: Copy updated flow files
        run: |
          echo "Copying updated flow files to the Prefect instance"
          for flow_file in $FLOW_FILES; do
            if [ -f "$flow_file" ]; then
              echo "Copying $flow_file"
              scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} $flow_file ec2-user@${{ env.PREFECT_IP }}:~/prefect/flows/
            fi
          done
      
      # Create prefect.yaml file on instance if it doesn't exist
      - name: Create prefect.yaml
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            cd ~/prefect
            if [ ! -f prefect.yaml ]; then
              echo 'Creating prefect.yaml file'
              cat > prefect.yaml << 'EOF'
              # Prefect configuration
              prefect-version: null
              name: minecraft-automation

              # Define pull steps to run when deploying
              pull:
                - prefect.deployments.steps.set_working_directory:
                    directory: /opt/prefect/flows

              # Define our deployments
              deployments:
                - name: backup-flow
                  entrypoint: backup_flow.py:backup_flow
                  work_pool:
                    name: default
                
                - name: server-monitoring-flow
                  entrypoint: server_monitoring_flow.py:server_monitoring_flow
                  work_pool:
                    name: default
                
                - name: snapshot-flow
                  entrypoint: snapshot_flow.py:snapshot_flow
                  work_pool:
                    name: default
              EOF
            fi
          "
      
      # Set PREFECT_HOST environment variable on the instance
      - name: Set PREFECT_HOST
        run: |
          echo "Setting PREFECT_HOST environment variable on ${{ env.PREFECT_IP }}..."
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            echo 'export PREFECT_HOST=${{ env.PREFECT_IP }}' > ~/.prefect_env
            echo '[ -f ~/.prefect_env ] && source ~/.prefect_env' >> ~/.bashrc
          "

      # Restart Prefect services to pick up new environment variables
      - name: Restart Prefect services
        run: |
          echo "Restarting Prefect services on ${{ env.PREFECT_IP }}..."
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            cd ~/prefect
            docker-compose down
            export PREFECT_HOST=${{ env.PREFECT_IP }}
            docker-compose up -d
          "

      # Wait for Prefect server to be ready
      - name: Wait for Prefect Server
        run: |
          # Wait for container to be ready (max 120 seconds)
          for i in {1..24}; do
            # Use Python for health check instead of curl
            if ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server python -c \"import urllib.request; urllib.request.urlopen('http://0.0.0.0:4200/api/health')\" 2>/dev/null"; then
              echo "Prefect server is running and responsive"
              break
            fi
            echo "Waiting for Prefect server to be ready... Attempt $i/24"
            
            # Show logs after 5 attempts
            if [ $i -eq 5 ]; then
              echo "Server still starting up, checking logs:"
              ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "docker logs prefect-server --tail=20"
            fi
            
            sleep 5
          done
      
      # Check flow files for errors
      - name: Check flow files
        run: |
          echo "Checking flow files for proper flow functions..."
          
          # Create a temporary script to check flow files
          cat > check_flows.sh << 'EOF'
          #!/bin/bash
          for FLOW_FILE in "$@"; do
            if [ ! -f "$FLOW_FILE" ]; then
              echo "Warning: File $FLOW_FILE doesn't exist, skipping"
              continue
            fi
            
            FLOW_NAME=$(basename "$FLOW_FILE")
            echo "Checking $FLOW_NAME for flow functions..."
            
            # Print file content for debugging
            echo "File content (first 15 lines):"
            head -n 15 "$FLOW_FILE"
            
            # First try with the enhanced pattern
            FLOW_FUNCS=$(grep -E "@flow(\s*|\([^)]*\))\s*\n*\s*def\s+([a-zA-Z0-9_]+)" "$FLOW_FILE" | grep -o "def\s\+[a-zA-Z0-9_]\+" | cut -d ' ' -f2)
            
            # If no matches, try a more permissive pattern
            if [ -z "$FLOW_FUNCS" ]; then
                echo "Trying alternate flow detection method..."
                FLOW_FUNCS=$(grep -A 1 "@flow" "$FLOW_FILE" | grep -o "def\s\+[a-zA-Z0-9_]\+" | cut -d ' ' -f2)
            fi
            
            if [ -z "$FLOW_FUNCS" ]; then
              echo "Warning: No flow functions found in $FLOW_NAME"
            else
              echo "Found flow functions in $FLOW_NAME: $FLOW_FUNCS"
            fi
          done
          EOF
          
          chmod +x check_flows.sh
          ./check_flows.sh $FLOW_FILES
      
      # Register/update flows
      - name: Register updated flows
        run: |
          echo "Registering updated flows..."
          
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            cd ~/prefect
            export PREFECT_HOST=${{ env.PREFECT_IP }}
            
            # For each flow file that was copied
            for flow_file in \$(ls -1 flows/*.py | grep -v '__init__' | grep -v '__pycache__'); do
              flow_name=\$(basename \$flow_file)
              echo \"Processing \$flow_name\"
              
              # Print file content for debugging
              echo \"File content (first 15 lines):\"
              head -n 15 \$flow_file
              
              # First try with the enhanced pattern
              flow_funcs=\$(grep -E \"@flow(\\s*|\\([^)]*\\))\\s*\\n*\\s*def\\s+([a-zA-Z0-9_]+)\" \$flow_file | grep -o \"def\\s\\+[a-zA-Z0-9_]\\+\" | cut -d ' ' -f2)
              
              # If no matches, try a more permissive pattern
              if [ -z \"\$flow_funcs\" ]; then
                  echo \"Trying alternate flow detection method...\"
                  flow_funcs=\$(grep -A 1 \"@flow\" \$flow_file | grep -o \"def\\s\\+[a-zA-Z0-9_]\\+\" | cut -d ' ' -f2)
              fi
              
              if [ -z \"\$flow_funcs\" ]; then
                echo \"Warning: No flow functions found in \$flow_name, skipping...\"
                continue
              fi
              
              echo \"Found flow functions: \$flow_funcs\"
              
              # Copy file to container
              echo \"Copying \$flow_file to container...\"
              docker cp \$flow_file prefect-server:/opt/prefect/flows/\$(basename \$flow_file)
              
              # Create work pool if it doesn't exist
              docker exec prefect-server bash -c 'prefect work-pool create default -t process || echo \"Work pool already exists\"'
              
              # Deploy each flow function
              for flow_func in \$flow_funcs; do
                echo \"Deploying \$flow_name:\$flow_func\"
                docker exec prefect-server bash -c \"cd /opt/prefect/flows && PREFECT_API_URL=http://${{ env.PREFECT_IP }}:4200/api prefect deploy \$(basename \$flow_file):\$flow_func -n \$flow_func-deployment --pool default\"
              done
            done
            
            # Ensure worker is running
            if ! docker ps | grep -q prefect-worker; then
              echo \"Worker not running, starting it...\"
              export PREFECT_HOST=${{ env.PREFECT_IP }}
              docker-compose up -d prefect-worker
            fi
          "
      
      # Output UI link
      - name: Output Prefect UI URL
        run: |
          echo "Prefect flows updated successfully!"
          echo "Prefect UI available at: http://${{ env.PREFECT_IP }}:4200" 