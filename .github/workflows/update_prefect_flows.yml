name: "Update Prefect Flows"

on:
  push:
    branches: [ "main" ]
    paths:
      - 'prefect/flows/**'
      - 'prefect/utils/**'
      - 'prefect/config/**'
  workflow_dispatch:
    inputs:
      prefect_ip:
        description: 'IP address of the Prefect instance'
        required: false
        type: string
      flow_to_update:
        description: 'Specific flow to update (leave empty to update all flows)'
        required: false
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-southeast-1' }}

jobs:
  update_flows:
    name: "Update Prefect Flows"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Get the Prefect instance IP from workflow input or AWS
      - name: Get Prefect instance IP
        id: prefect_ip
        run: |
          # Get Prefect IP from secrets if available
          PREFECT_IP="${{ secrets.PREFECT_IP }}"
          
          if [ -n "$PREFECT_IP" ]; then
            echo "Using Prefect IP from GitHub secrets: $PREFECT_IP"
          else
            # Try to get from Terraform as fallback
            echo "No PREFECT_IP secret found, trying to get from Terraform..."
            
            # Setup Terraform if needed
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install -y terraform
            
            # Initialize Terraform
            cd terraform
            echo "Initializing Terraform..."
            terraform init -input=false
            
            # Get IP from Terraform output with error handling
            echo "Getting Prefect IP from Terraform output..."
            if ! PREFECT_IP=$(terraform output -raw prefect_orchestration_ip 2>/dev/null); then
              echo "Failed to get Prefect IP from Terraform output."
              echo "::error::Failed to get Prefect IP from Terraform. Please provide an IP address manually."
              exit 1
            fi
          fi
          
          # Validate the IP
          if [ -z "$PREFECT_IP" ]; then
            echo "Prefect IP is empty."
            echo "::error::Prefect IP not found. Please add it to GitHub secrets as PREFECT_IP."
            exit 1
          fi
          
          echo "Using Prefect IP: $PREFECT_IP"
          echo "prefect_ip=$PREFECT_IP" >> $GITHUB_OUTPUT
          echo "PREFECT_IP=$PREFECT_IP" >> $GITHUB_ENV
          echo "PREFECT_HOST=$PREFECT_IP" >> $GITHUB_ENV
      
      # Setup SSH for connecting to the instance
      - name: Setup SSH
        run: |
          # Create the .ssh directory
          mkdir -p ~/.ssh
          
          # Check if we have a PEM key available
          if [ -n "${{ secrets.PREFECT_PEM_KEY }}" ]; then
            echo "Using PREFECT_PEM_KEY for SSH authentication"
            echo "${{ secrets.PREFECT_PEM_KEY }}" > ~/.ssh/prefect_key.pem
            chmod 600 ~/.ssh/prefect_key.pem
            SSH_KEY_PATH=~/.ssh/prefect_key.pem
          else
            echo "Using SSH_PRIVATE_KEY for SSH authentication"
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            SSH_KEY_PATH=~/.ssh/id_rsa
          fi
          
          # Add the host key to known_hosts
          ssh-keyscan -H ${{ env.PREFECT_IP }} >> ~/.ssh/known_hosts
          
          # Test SSH connection
          echo "Testing SSH connection..."
          if ! ssh -i $SSH_KEY_PATH -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} "echo 'SSH Connection Successful'"; then
            echo "::error::SSH connection failed. Check your SSH keys and permissions."
            exit 1
          fi
          
          # Export the SSH key path for later steps
          echo "SSH_KEY_PATH=$SSH_KEY_PATH" >> $GITHUB_ENV
      
      # Identify changed files if no specific flow is specified
      - name: Identify changed files
        id: changed_files
        run: |
          if [ -n "${{ github.event.inputs.flow_to_update }}" ]; then
            echo "Specific flow to update: ${{ github.event.inputs.flow_to_update }}"
            FLOW_FILES="prefect/flows/${{ github.event.inputs.flow_to_update }}"
          else
            # Get list of changed files in the prefect directories
            git fetch origin
            BASE_SHA=$(git merge-base origin/main HEAD)
            
            # Identify changed flow files
            FLOW_FILES=$(git diff --name-only $BASE_SHA HEAD | grep "^prefect/flows/.*\.py$" || echo "")
            if [ -z "$FLOW_FILES" ]; then
              echo "No flow files changed"
              # Still continue to make sure setup works
              FLOW_FILES="prefect/flows/*.py"
            fi
            
            # Identify changed utils files
            UTILS_CHANGED=$(git diff --name-only $BASE_SHA HEAD | grep "^prefect/utils/" || echo "")
            if [ -n "$UTILS_CHANGED" ]; then
              echo "Utils files changed: $UTILS_CHANGED"
            fi
            
            # Identify changed config files
            CONFIG_CHANGED=$(git diff --name-only $BASE_SHA HEAD | grep "^prefect/config/" || echo "")
            if [ -n "$CONFIG_CHANGED" ]; then
              echo "Config files changed: $CONFIG_CHANGED"
            fi
          fi
          
          echo "FLOW_FILES=$FLOW_FILES" >> $GITHUB_ENV
          echo "Flow files to update: $FLOW_FILES"
      
      # Copy only the changed flow files to the Prefect instance
      - name: Copy updated flow files
        run: |
          echo "Copying updated flow files to the Prefect instance at ${{ env.PREFECT_IP }}..."
          for flow_file in $FLOW_FILES; do
            if [ -f "$flow_file" ]; then
              echo "Copying $flow_file"
              scp -i $SSH_KEY_PATH $flow_file ec2-user@${{ env.PREFECT_IP }}:~/prefect/flows/
            fi
          done
          
          # Copy requirements.txt
          if [ -f "prefect/requirements.txt" ]; then
            echo "Copying requirements.txt"
            scp -i $SSH_KEY_PATH prefect/requirements.txt ec2-user@${{ env.PREFECT_IP }}:~/prefect/
          fi
      
      # Copy utils and config directories
      - name: Copy utils, config and bin directories
        run: |
          echo "Copying utils, config and bin directories to the Prefect instance..."
          
          # Create directories if they don't exist
          ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "mkdir -p ~/prefect/utils ~/prefect/config ~/prefect/bin"
          
          # Copy utils directory
          if [ -d "prefect/utils" ]; then
            echo "Copying utils directory"
            scp -i $SSH_KEY_PATH -r prefect/utils/* ec2-user@${{ env.PREFECT_IP }}:~/prefect/utils/
          fi
          
          # Copy config directory
          if [ -d "prefect/config" ]; then
            echo "Copying config directory"
            scp -i $SSH_KEY_PATH -r prefect/config/* ec2-user@${{ env.PREFECT_IP }}:~/prefect/config/
          fi

          # Copy bin directory
          if [ -d "prefect/bin" ]; then
            echo "Copying bin directory"
            scp -i $SSH_KEY_PATH -r prefect/bin/* ec2-user@${{ env.PREFECT_IP }}:~/prefect/bin/
            ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "chmod +x ~/prefect/bin/*.sh"
          fi
      
      # Check for metrics API configuration
      - name: Check for Metrics API
        id: metrics_api
        run: |
          # Get Minecraft IP from secrets or from Terraform
          MINECRAFT_IP="${{ secrets.MINECRAFT_IP }}"
          
          if [ -z "$MINECRAFT_IP" ]; then
            echo "No MINECRAFT_IP secret found, trying to get from Terraform..."
            MINECRAFT_IP=$(cd terraform && terraform output -raw minecraft_server_ip 2>/dev/null || echo "")
          else
            echo "Using MINECRAFT_IP from GitHub secrets"
          fi
          
          if [ -n "$MINECRAFT_IP" ]; then
            echo "Checking for Metrics API on $MINECRAFT_IP..."
            
            # Try to get API key from server
            if ssh -i $SSH_KEY_PATH ec2-user@$MINECRAFT_IP "test -f /opt/metrics-api/api_key.txt"; then
              API_KEY=$(ssh -i $SSH_KEY_PATH ec2-user@$MINECRAFT_IP "grep 'API Key:' /opt/metrics-api/api_key.txt | cut -d' ' -f3")
              echo "Found API key from server"
              echo "METRICS_API_URL=http://$MINECRAFT_IP:8000" >> $GITHUB_ENV
              echo "METRICS_API_KEY=$API_KEY" >> $GITHUB_ENV
              echo "metrics_api_available=true" >> $GITHUB_OUTPUT
            else
              echo "API key not found on server"
              echo "metrics_api_available=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Minecraft server IP not found"
            echo "metrics_api_available=false" >> $GITHUB_OUTPUT
          fi
      
      # Install Python dependencies and setup containers
      - name: Install Python dependencies and setup containers
        run: |
          echo "Installing Python dependencies in Prefect containers..."
          ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "
            # Install dependencies from requirements.txt in the EC2 home directory
            if [ -f ~/prefect/requirements.txt ]; then
              echo 'Installing dependencies from requirements.txt...'
              docker cp ~/prefect/requirements.txt prefect-server:/tmp/requirements.txt
              docker exec prefect-server pip install -r /tmp/requirements.txt
              docker cp ~/prefect/requirements.txt prefect-worker:/tmp/requirements.txt
              docker exec prefect-worker pip install -r /tmp/requirements.txt
              
              # Also install requests package if not in requirements
              docker exec prefect-server pip install requests
              docker exec prefect-worker pip install requests
              
              # Verify dependency installation
              echo 'Verifying key package installation:'
              docker exec prefect-server pip list | grep -E 'psutil|paramiko|requests'
              docker exec prefect-worker pip list | grep -E 'psutil|paramiko|requests'
            else
              echo 'ERROR: requirements.txt not found! Cannot set up containers properly.'
              echo 'Please ensure requirements.txt exists in the prefect directory.'
              exit 1
            fi
            
            # If Metrics API is available, update environment files
            if [ -n "${{ env.METRICS_API_URL }}" ] && [ -n "${{ env.METRICS_API_KEY }}" ]; then
              echo "Updating environment with Metrics API configuration"
              
              # Update .env file
              cat > ~/prefect/.env << 'PREFECT_ENV_EOF'
              PREFECT_API_URL=http://${{ env.PREFECT_IP }}:4200/api
              METRICS_API_URL=${{ env.METRICS_API_URL }}
              METRICS_API_KEY=${{ env.METRICS_API_KEY }}
              PREFECT_ENV_EOF
              
              # Update Docker container environment
              docker exec prefect-server bash -c 'echo \"export METRICS_API_URL=${{ env.METRICS_API_URL }}\" >> /root/.bashrc'
              docker exec prefect-server bash -c 'echo \"export METRICS_API_KEY=${{ env.METRICS_API_KEY }}\" >> /root/.bashrc'
              docker exec prefect-worker bash -c 'echo \"export METRICS_API_URL=${{ env.METRICS_API_URL }}\" >> /root/.bashrc'
              docker exec prefect-worker bash -c 'echo \"export METRICS_API_KEY=${{ env.METRICS_API_KEY }}\" >> /root/.bashrc'
            fi
            
            # Set up the Prefect containers with proper configuration files
            if [ -f ~/prefect/bin/setup_prefect_containers.sh ]; then
              echo 'Setting up Prefect containers with proper configuration...'
              cd ~/prefect
              sudo chmod +x bin/setup_prefect_containers.sh
              sudo bin/setup_prefect_containers.sh
              echo 'Prefect containers configured successfully'
            else
              echo 'setup_prefect_containers.sh not found, skipping container configuration'
            fi
          "
      
      # Create prefect.yaml file on instance if it doesn't exist
      - name: Create or update prefect.yaml
        run: |
          echo "Checking prefect.yaml file on ${{ env.PREFECT_IP }}..."
          
          # Check if prefect.yaml already exists on the server
          if ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "test -f ~/prefect/prefect.yaml"; then
            echo "prefect.yaml already exists, preserving it"
          else
            echo "Creating default prefect.yaml file..."
            # Copy the template file to the server
            if [ -f "prefect/prefect.yaml.template" ]; then
              scp -i $SSH_KEY_PATH prefect/prefect.yaml.template ec2-user@${{ env.PREFECT_IP }}:~/prefect/prefect.yaml
              echo "Default prefect.yaml created from template"
            else
              echo "Warning: Template file not found. Creating minimal prefect.yaml"
              ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "echo 'name: minecraft-automation' > ~/prefect/prefect.yaml"
            fi
          fi
      
      # Set PREFECT_HOST environment variable on the instance
      - name: Set PREFECT_HOST
        run: |
          echo "Setting PREFECT_HOST environment variable on ${{ env.PREFECT_IP }}..."
          ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "
            echo 'export PREFECT_HOST=${{ env.PREFECT_IP }}' > ~/.prefect_env
            echo '[ -f ~/.prefect_env ] && source ~/.prefect_env' >> ~/.bashrc
          "

      # Restart Prefect services to pick up new environment variables
      - name: Restart Prefect services
        run: |
          echo "Restarting Prefect services on ${{ env.PREFECT_IP }}..."
          ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "
            cd ~/prefect
            docker-compose down
            export PREFECT_HOST=${{ env.PREFECT_IP }}
            docker-compose up -d
          "

      # Wait for Prefect server to be ready
      - name: Wait for Prefect Server
        run: |
          echo "Waiting for Prefect server at ${{ env.PREFECT_IP }} to be ready..."
          # Wait for container to be ready (max 120 seconds)
          for i in {1..24}; do
            # Use Python for health check instead of curl
            if ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server python -c \"import urllib.request; urllib.request.urlopen('http://0.0.0.0:4200/api/health')\" 2>/dev/null"; then
              echo "Prefect server is running and responsive"
              break
            fi
            echo "Waiting for Prefect server to be ready... Attempt $i/24"
            
            # Show logs after 5 attempts
            if [ $i -eq 5 ]; then
              echo "Server still starting up, checking logs:"
              ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "docker logs prefect-server --tail=20"
            fi
            
            sleep 5
          done
      
      # Set proper API URL configuration
      - name: Configure Prefect API URL
        run: |
          echo "Setting Prefect API URL to use public IP..."
          ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "
            docker exec prefect-server bash -c 'prefect config set PREFECT_API_URL=http://${{ env.PREFECT_IP }}:4200/api'
            echo 'PREFECT_API_URL configuration set to http://${{ env.PREFECT_IP }}:4200/api'
          "
      
      # Check flow files for errors
      - name: Check flow files
        run: |
          echo "Checking flow files for proper flow functions..."
          
          # Create a temporary script to check flow files
          cat > check_flows.sh << 'CHECK_FLOWS_EOF'
          #!/bin/bash
          for FLOW_FILE in "$@"; do
            if [ ! -f "$FLOW_FILE" ]; then
              echo "Warning: File $FLOW_FILE doesn't exist, skipping"
              continue
            fi
            
            FLOW_NAME=$(basename "$FLOW_FILE")
            echo "Checking $FLOW_NAME for flow functions..."

            # Print file content for debugging
            echo "File content (first 15 lines):"
            head -n 15 "$FLOW_FILE"
            
            # First try with the enhanced pattern
            FLOW_FUNCS=$(grep -E "@flow(\s*|\([^)]*\))\s*\n*\s*def\s+([a-zA-Z0-9_]+)" "$FLOW_FILE" | grep -o "def\s\+[a-zA-Z0-9_]\+" | cut -d ' ' -f2)
            
            # If no matches, try a more permissive pattern
            if [ -z "$FLOW_FUNCS" ]; then
                echo "Trying alternate flow detection method..."
                FLOW_FUNCS=$(grep -A 1 "@flow" "$FLOW_FILE" | grep -o "def\s\+[a-zA-Z0-9_]\+" | cut -d ' ' -f2)
            fi
            
            if [ -z "$FLOW_FUNCS" ]; then
              echo "Warning: No flow functions found in $FLOW_NAME"
            else
              echo "Found flow functions in $FLOW_NAME: $FLOW_FUNCS"
            fi
          done
          CHECK_FLOWS_EOF
          
          chmod +x check_flows.sh
          ./check_flows.sh $FLOW_FILES
      
      # Deploy flows and configure containers
      - name: Deploy flows and configure containers
        run: |
          echo "Deploying flows and configuring containers on ${{ env.PREFECT_IP }}..."
          
          ssh -i $SSH_KEY_PATH ec2-user@${{ env.PREFECT_IP }} "
            cd ~/prefect
            
            # Check if deploy_flows.sh exists and is executable
            if [ -f bin/deploy_flows.sh ] && [ -x bin/deploy_flows.sh ]; then
              echo 'Running deploy_flows.sh script...'
              bin/deploy_flows.sh
            else
              echo 'deploy_flows.sh not found or not executable, using standard flow registration...'
              
              # Create directories in containers
              docker exec prefect-server mkdir -p /opt/prefect/utils /opt/prefect/config /root/.ssh /opt/prefect/flows
              docker exec prefect-worker mkdir -p /opt/prefect/utils /opt/prefect/config /root/.ssh /opt/prefect/flows
              
              # Install dependencies FIRST before anything else
              if [ -f ~/prefect/requirements.txt ]; then
                echo 'Installing dependencies from requirements.txt...'
                docker cp ~/prefect/requirements.txt prefect-server:/tmp/requirements.txt
                docker exec prefect-server pip install -r /tmp/requirements.txt
                docker cp ~/prefect/requirements.txt prefect-worker:/tmp/requirements.txt
                docker exec prefect-worker pip install -r /tmp/requirements.txt
                
                # Verify dependency installation
                echo 'Verifying key package installation:'
                docker exec prefect-server pip list | grep -E 'psutil|paramiko'
                docker exec prefect-worker pip list | grep -E 'psutil|paramiko'
              else
                echo 'ERROR: requirements.txt not found! Cannot set up containers properly.'
                echo 'Please ensure requirements.txt exists in the prefect directory.'
                exit 1
              fi
              
              # Copy config and utils to containers
              docker cp config/ec2_config.ini prefect-server:/opt/prefect/config/
              docker cp config/ec2_config.ini prefect-worker:/opt/prefect/config/
              docker cp utils/server_utils.py prefect-server:/opt/prefect/utils/
              docker cp utils/server_utils.py prefect-worker:/opt/prefect/utils/
              
              # Set up SSH in the containers
              echo 'Setting up SSH for containers...'
              
              # Create a new SSH key pair on the EC2 host for container use
              rm -rf /tmp/ssh_keys
              mkdir -p /tmp/ssh_keys
              chmod 700 /tmp/ssh_keys
              ssh-keygen -t rsa -f /tmp/ssh_keys/id_rsa -N \"\" -C \"prefect_container_key\"
              cat /tmp/ssh_keys/id_rsa.pub >> ~/.ssh/authorized_keys
              
              # Copy the key to the containers
              docker cp /tmp/ssh_keys/id_rsa prefect-server:/root/.ssh/id_rsa
              docker cp /tmp/ssh_keys/id_rsa prefect-worker:/root/.ssh/id_rsa
              docker exec prefect-server chmod 600 /root/.ssh/id_rsa
              docker exec prefect-worker chmod 600 /root/.ssh/id_rsa
              
              # Verify SSH keys exists in containers
              echo 'Verifying SSH key setup:'
              docker exec prefect-server ls -la /root/.ssh/
              docker exec prefect-worker ls -la /root/.ssh/
              
              # Add localhost to known_hosts
              docker exec prefect-server bash -c \"ssh-keyscan -H localhost >> /root/.ssh/known_hosts\"
              docker exec prefect-worker bash -c \"ssh-keyscan -H localhost >> /root/.ssh/known_hosts\"
              
              # Always update EC2 config to use localhost
              cat > /tmp/container_ec2_config.ini << 'CONFIG_EOF'
# EC2 instance connection details for container use
EC2_HOST=localhost
SSH_USER=ec2-user
SSH_PORT=22

# Monitor settings
MONITOR_INTERVAL=300  # 5 minutes
DISCORD_WEBHOOK_ENABLED=true
CONFIG_EOF
              docker cp /tmp/container_ec2_config.ini prefect-server:/opt/prefect/config/ec2_config.ini
              docker cp /tmp/container_ec2_config.ini prefect-worker:/opt/prefect/config/ec2_config.ini
              
              # Also create the symlink version
              docker exec prefect-server mkdir -p /workspace/prefect/config
              docker exec prefect-worker mkdir -p /workspace/prefect/config
              docker cp /tmp/container_ec2_config.ini prefect-server:/workspace/prefect/config/ec2_config.ini
              docker cp /tmp/container_ec2_config.ini prefect-worker:/workspace/prefect/config/ec2_config.ini
              rm /tmp/container_ec2_config.ini
              
              # Test SSH connection
              echo 'Testing SSH connection from container...'
              docker exec prefect-server ssh -o BatchMode=yes -o ConnectTimeout=5 ec2-user@localhost \"echo SSH test successful from container\"
              
              # Set environment variables including the EC2 config path
              docker exec prefect-server bash -c 'echo \"export PREFECT_API_URL=http://${{ env.PREFECT_IP }}:4200/api\" >> /root/.bashrc'
              docker exec prefect-server bash -c 'echo \"export KRONI_EC2_CONFIG=/opt/prefect/config/ec2_config.ini\" >> /root/.bashrc'
              docker exec prefect-server bash -c 'echo \"export KRONI_EC2_CONFIG=/opt/prefect/config/ec2_config.ini\" > /etc/environment'
              docker exec prefect-worker bash -c 'echo \"export PREFECT_API_URL=http://${{ env.PREFECT_IP }}:4200/api\" >> /root/.bashrc'
              docker exec prefect-worker bash -c 'echo \"export KRONI_EC2_CONFIG=/opt/prefect/config/ec2_config.ini\" >> /root/.bashrc'
              docker exec prefect-worker bash -c 'echo \"export KRONI_EC2_CONFIG=/opt/prefect/config/ec2_config.ini\" > /etc/environment'
              
              # Verify config file existence
              docker exec prefect-server bash -c '[ -f /opt/prefect/config/ec2_config.ini ] && echo \"EC2 config found at /opt/prefect/config/ec2_config.ini\" || echo \"WARNING: EC2 config NOT found!\"'
              docker exec prefect-server bash -c '[ -f /workspace/prefect/config/ec2_config.ini ] && echo \"EC2 config symlink is working!\" || echo \"ERROR: Symlink not working!\"; cat /workspace/prefect/config/ec2_config.ini'
            fi
            
            # For each flow file, copy to container and deploy
            for flow_file in \$(ls -1 flows/*.py | grep -v '__init__' | grep -v '__pycache__'); do
              flow_name=\$(basename \$flow_file)
              echo \"Processing \$flow_name\"
              
              # Copy file to container
              echo \"Copying \$flow_file to container...\"
              docker cp \$flow_file prefect-server:/opt/prefect/flows/\$(basename \$flow_file)
              
              # Create work pool if it doesn't exist
              docker exec prefect-server bash -c 'prefect work-pool create default -t process || echo \"Work pool already exists\"'
              
              # Deploy flow with debugging of environment variables
              docker exec prefect-server bash -c \"cd /opt/prefect/flows && 
                export KRONI_EC2_CONFIG=/opt/prefect/config/ec2_config.ini &&
                export PREFECT_API_URL=http://${{ env.PREFECT_IP }}:4200/api &&
                echo 'ENV variables for deployment:' &&
                echo \\\"KRONI_EC2_CONFIG: \\\$KRONI_EC2_CONFIG\\\" &&
                
                # Check for flow function
                FLOW_FUNCTIONS=\\\$(grep -B 1 -A 1 -E '@flow' \$(basename \$flow_file) | grep -E 'def\\\\s+[a-zA-Z0-9_]+\\\\(' | sed -E 's/.*def\\\\s+([a-zA-Z0-9_]+)\\\\(.*/\\\\1/g' | head -1) &&
                
                # Try with server_monitoring_flow as fallback
                if [ -z \\\"\\\$FLOW_FUNCTIONS\\\" ] && grep -q 'server_monitoring_flow' \$(basename \$flow_file); then
                  FLOW_FUNCTIONS='server_monitoring_flow';
                fi &&
                
                # Deploy if we found a flow
                if [ -n \\\"\\\$FLOW_FUNCTIONS\\\" ]; then
                  echo 'Deploying \$(basename \$flow_file):\\\$FLOW_FUNCTIONS' &&
                  prefect deploy \$(basename \$flow_file):\\\$FLOW_FUNCTIONS -n \\\${FLOW_FUNCTIONS}-deployment --pool default --override-env-vars KRONI_EC2_CONFIG -v
                else 
                  echo 'No flow function found'
                fi
              \"
            done
            
            # Ensure worker is running
            if ! docker ps | grep -q prefect-worker; then
              echo \"Worker not running, starting it...\"
              export PREFECT_HOST=${{ env.PREFECT_IP }}
              docker-compose up -d prefect-worker
            fi
            
            # Cleanup
            rm -rf /tmp/ssh_keys
          "
      
      # Output UI link
      - name: Output Prefect UI URL
        run: |
          echo "Prefect flows updated successfully!"
          echo "Prefect UI available at: http://${{ env.PREFECT_IP }}:4200"