name: "Terraform CI/CD"

on:
  push:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  contents: read
  pull-requests: write

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-southeast-1' }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Prefect directory
        run: |
          mkdir -p ./prefect/flows
          cp -r ../prefect/flows/* ./prefect/flows/
          # Copy the Dockerfile and Docker Compose configs
          cp ../prefect/Dockerfile ./prefect/
          cp ../prefect/docker-compose.yaml ./prefect/
          cp ../prefect/deploy_prefect.sh ./prefect/

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          TF_VAR_ssh_key_name: ${{ secrets.SSH_KEY_NAME }}
          TF_VAR_discord_webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TF_VAR_s3_backup_bucket_name: ${{ secrets.S3_BACKUP_BUCKET_NAME }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event.inputs.action == '' || github.event.inputs.action == null
        env:
          TF_VAR_ssh_key_name: ${{ secrets.SSH_KEY_NAME }}
          TF_VAR_discord_webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TF_VAR_s3_backup_bucket_name: ${{ secrets.S3_BACKUP_BUCKET_NAME }}
          TF_VAR_ssh_allowed_cidrs: ${{ secrets.SSH_ALLOWED_CIDRS || '["0.0.0.0/0"]' }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Manual Approval for Apply
        uses: trstringer/manual-approval@v1
        if: github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy'
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ github.repository_owner }}
          minimum-approvals: 1
          issue-title: "Terraform ${{ github.event.inputs.action }} approval needed"
          issue-body: "Please approve or deny the Terraform ${{ github.event.inputs.action }} action."
          exclude-workflow-initiator-as-approver: false
          timeout-minutes: 30

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve
        env:
          TF_VAR_ssh_key_name: ${{ secrets.SSH_KEY_NAME }}
          TF_VAR_discord_webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TF_VAR_s3_backup_bucket_name: ${{ secrets.S3_BACKUP_BUCKET_NAME }}
          TF_VAR_ssh_allowed_cidrs: ${{ secrets.SSH_ALLOWED_CIDRS || '["0.0.0.0/0"]' }}

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        env:
          TF_VAR_ssh_key_name: ${{ secrets.SSH_KEY_NAME }}
          TF_VAR_discord_webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TF_VAR_s3_backup_bucket_name: ${{ secrets.S3_BACKUP_BUCKET_NAME }}
          TF_VAR_ssh_allowed_cidrs: ${{ secrets.SSH_ALLOWED_CIDRS || '["0.0.0.0/0"]' }}

      - name: Terraform Output
        if: github.event.inputs.action == 'apply'
        run: terraform output
        continue-on-error: true

  build_and_push_prefect_image:
    name: "Build and Push Prefect Image"
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'apply'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: ./prefect
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/custom-prefect:latest
  
  deploy_prefect_flows:
    name: "Deploy Prefect Flows"
    needs: [terraform, build_and_push_prefect_image]
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'apply'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Get Prefect instance IP
        id: prefect_ip
        run: |
          PREFECT_IP=$(terraform -chdir=./terraform output -raw prefect_orchestration_ip)
          echo "PREFECT_IP=$PREFECT_IP" >> $GITHUB_ENV
          
      - name: Prepare Instance
        run: |
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} -o StrictHostKeyChecking=no ec2-user@${{ env.PREFECT_IP }} 'mkdir -p ~/prefect/flows'

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          chmod 600 ~/.ssh/${{ secrets.SSH_KEY_NAME }}
          ssh-keyscan -H ${{ env.PREFECT_IP }} >> ~/.ssh/known_hosts

      - name: Wait for Prefect Server
        run: |
          # Wait for container to be ready (max 120 seconds)
          for i in {1..24}; do
            if ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "docker exec prefect-server curl -s http://localhost:4200/api/health | grep -q 'ok'"; then
              echo "Prefect server is running and healthy"
              break
            fi
            
            echo "Waiting for Prefect server to be ready... Attempt $i/24"
            
            # Show logs after 5 attempts
            if [ $i -eq 5 ]; then
              echo "Server still starting up, checking logs:"
              ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "docker logs prefect-server --tail=20"
            fi
            
            sleep 5
          done

      # Set proper API URL configuration
      - name: Configure Prefect API URL
        run: |
          echo "Setting Prefect API URL to use public IP..."
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            docker exec prefect-server bash -c 'prefect config set PREFECT_API_URL=http://${{ env.PREFECT_IP }}:4200/api'
            echo 'PREFECT_API_URL configuration set to http://${{ env.PREFECT_IP }}:4200/api'
          "

      - name: Register Prefect Deployments
        run: |
          # Create work pool if needed
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            docker exec prefect-server bash -c 'prefect work-pool create default -t process || echo \"Work pool already exists\"'
          "
          
          # Register each flow
          for flow_file in prefect/flows/*.py; do
            if [[ "$flow_file" != *"__init__.py"* && "$flow_file" != *"__pycache__"* ]]; then
              flow_name=$(basename "$flow_file")
              
              # Copy the flow file to the server
              scp -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} "$flow_file" ec2-user@${{ env.PREFECT_IP }}:~/prefect/flows/
              
              # Find flow functions in the file
              flow_funcs=$(grep -o "@flow.*def \w\+" "$flow_file" | awk '{print $NF}')
              
              if [ -z "$flow_funcs" ]; then
                echo "Warning: No flow functions found in $flow_name, skipping..."
                continue
              fi
              
              # Deploy each flow function
              for flow_func in $flow_funcs; do
                echo "Deploying $flow_name:$flow_func"
                ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
                  docker exec prefect-server bash -c 'cd /opt/prefect/flows && prefect deploy $flow_name:$flow_func -n $flow_func-deployment --pool default'
                "
              done
            fi
          done
          
          # Start worker if needed
          ssh -i ~/.ssh/${{ secrets.SSH_KEY_NAME }} ec2-user@${{ env.PREFECT_IP }} "
            if ! docker ps | grep -q prefect-worker; then
              echo \"Starting worker...\"
              docker-compose up -d prefect-worker
            fi
          "