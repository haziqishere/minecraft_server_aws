name: "Deploy Metrics API"

on:
  push:
    branches: [ "main" ]
    paths:
      - 'metrics_api/**'
      - '.github/workflows/deploy_metrics_api.yml'
  workflow_dispatch:
    inputs:
      api_key:
        description: 'Custom API key (leave empty to generate one)'
        required: false
        type: string

env:
  DOCKER_IMAGE: "minecraft-metrics-api:latest"
  METRICS_API_PORT: 8000
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-southeast-1' }}

jobs:
  build_and_deploy:
    name: "Build and Deploy Metrics API"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Get the Minecraft server IP from GitHub secrets or terraform output
      - name: Get Minecraft server IP
        id: minecraft_ip
        run: |
          # Use Minecraft IP from secrets if available
          MINECRAFT_IP="${{ secrets.MINECRAFT_IP }}"
          
          if [ -n "$MINECRAFT_IP" ]; then
            echo "Using Minecraft IP from GitHub secrets: $MINECRAFT_IP"
          else
            echo "No MINECRAFT_IP secret found, trying to get from Terraform..."
            
            # Setup Terraform
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install -y terraform
            
            # Initialize Terraform
            cd terraform
            terraform init -input=false
            
            # Get the Minecraft server IP
            if ! MINECRAFT_IP=$(terraform output -raw minecraft_server_ip); then
              echo "Failed to get Minecraft IP from Terraform."
              echo "::error::Failed to get Minecraft IP. Please add it to GitHub secrets as MINECRAFT_IP."
              exit 1
            fi
          fi
          
          if [ -z "$MINECRAFT_IP" ]; then
            echo "Minecraft IP is empty."
            echo "::error::Minecraft IP not found. Please add it to GitHub secrets as MINECRAFT_IP."
            exit 1
          fi
          
          echo "Using Minecraft IP: $MINECRAFT_IP"
          echo "MINECRAFT_IP=$MINECRAFT_IP" >> $GITHUB_ENV
          echo "minecraft_ip=$MINECRAFT_IP" >> $GITHUB_OUTPUT
      
      # Setup SSH for connecting to the Minecraft server
      - name: Setup SSH
        run: |
          # Create the .ssh directory
          mkdir -p ~/.ssh
          
          # Check if we have a PEM key available
          if [ -n "${{ secrets.MINECRAFT_PEM_KEY }}" ]; then
            echo "Using MINECRAFT_PEM_KEY for SSH authentication"
            echo "${{ secrets.MINECRAFT_PEM_KEY }}" > ~/.ssh/minecraft_key.pem
            chmod 600 ~/.ssh/minecraft_key.pem
            SSH_KEY_PATH=~/.ssh/minecraft_key.pem
          else
            echo "Using SSH_PRIVATE_KEY for SSH authentication"
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            SSH_KEY_PATH=~/.ssh/id_rsa
          fi
          
          # Add the host key to known_hosts
          ssh-keyscan -H ${{ env.MINECRAFT_IP }} >> ~/.ssh/known_hosts
          
          # Test SSH connection
          echo "Testing SSH connection..."
          if ! ssh -i $SSH_KEY_PATH -o StrictHostKeyChecking=no ec2-user@${{ env.MINECRAFT_IP }} "echo 'SSH Connection Successful'"; then
            echo "::error::SSH connection failed. Check your SSH keys and permissions."
            exit 1
          fi
          
          # Export the SSH key path for later steps
          echo "SSH_KEY_PATH=$SSH_KEY_PATH" >> $GITHUB_ENV
      
      # Generate or use provided API key
      - name: Set API Key
        id: api_key
        run: |
          if [ -n "${{ github.event.inputs.api_key }}" ]; then
            API_KEY="${{ github.event.inputs.api_key }}"
          else
            API_KEY=$(openssl rand -hex 16)
          fi
          echo "API_KEY=$API_KEY" >> $GITHUB_ENV
          echo "api_key=$API_KEY" >> $GITHUB_OUTPUT
          echo "Using API key: $API_KEY (first 8 chars shown for security)"
      
      # Copy files to the Minecraft server
      - name: Prepare Minecraft server
        run: |
          echo "Creating directories on Minecraft server..."
          # Use sudo to create directory in /opt
          ssh -i ${{ env.SSH_KEY_PATH }} ec2-user@${{ env.MINECRAFT_IP }} "sudo mkdir -p /opt/metrics-api && sudo chown ec2-user:ec2-user /opt/metrics-api"
          
          # Make sure metrics_api directory exists
          if [ ! -d "metrics_api" ]; then
            echo "Creating metrics_api directory..."
            mkdir -p metrics_api
          fi
          
          # Check and copy metrics_api_server.py
          if [ -f "metrics_api_server.py" ]; then
            echo "Found metrics_api_server.py in root directory"
            cp metrics_api_server.py metrics_api/
          elif [ ! -f "metrics_api/metrics_api_server.py" ]; then
            echo "::error::metrics_api_server.py not found! Creating a basic file..."
            
            # Create a minimal version in metrics_api directory
            echo '#!/usr/bin/env python3' > metrics_api/metrics_api_server.py
            echo '"""' >> metrics_api/metrics_api_server.py
            echo 'Minecraft Server Metrics API - Minimal Version' >> metrics_api/metrics_api_server.py
            echo 'This file was auto-generated by the workflow because the original was missing.' >> metrics_api/metrics_api_server.py
            echo '"""' >> metrics_api/metrics_api_server.py
            echo 'import os' >> metrics_api/metrics_api_server.py
            echo 'import logging' >> metrics_api/metrics_api_server.py
            echo 'from fastapi import FastAPI, Depends, HTTPException, Security' >> metrics_api/metrics_api_server.py
            echo 'from fastapi.security.api_key import APIKeyHeader' >> metrics_api/metrics_api_server.py
            echo 'from fastapi.middleware.cors import CORSMiddleware' >> metrics_api/metrics_api_server.py
            echo 'import uvicorn' >> metrics_api/metrics_api_server.py
            echo '' >> metrics_api/metrics_api_server.py
            echo 'app = FastAPI(title="Minecraft Server Metrics API", version="1.0.0")' >> metrics_api/metrics_api_server.py
            echo '' >> metrics_api/metrics_api_server.py
            echo '# Add CORS middleware' >> metrics_api/metrics_api_server.py
            echo 'app.add_middleware(' >> metrics_api/metrics_api_server.py
            echo '    CORSMiddleware,' >> metrics_api/metrics_api_server.py
            echo '    allow_origins=["*"],' >> metrics_api/metrics_api_server.py
            echo '    allow_credentials=True,' >> metrics_api/metrics_api_server.py
            echo '    allow_methods=["*"],' >> metrics_api/metrics_api_server.py
            echo '    allow_headers=["*"],' >> metrics_api/metrics_api_server.py
            echo ')' >> metrics_api/metrics_api_server.py
            echo '' >> metrics_api/metrics_api_server.py
            echo '# Set up API key authentication' >> metrics_api/metrics_api_server.py
            echo 'API_KEY = os.getenv("METRICS_API_KEY", "")' >> metrics_api/metrics_api_server.py
            echo 'api_key_header = APIKeyHeader(name="X-API-Key")' >> metrics_api/metrics_api_server.py
            echo '' >> metrics_api/metrics_api_server.py
            echo 'def get_api_key(api_key: str = Security(api_key_header)):' >> metrics_api/metrics_api_server.py
            echo '    if api_key == API_KEY:' >> metrics_api/metrics_api_server.py
            echo '        return api_key' >> metrics_api/metrics_api_server.py
            echo '    raise HTTPException(status_code=403, detail="Invalid API Key")' >> metrics_api/metrics_api_server.py
            echo '' >> metrics_api/metrics_api_server.py
            echo '@app.get("/api/v1/health")' >> metrics_api/metrics_api_server.py
            echo 'async def health_check():' >> metrics_api/metrics_api_server.py
            echo '    return {"status": "healthy"}' >> metrics_api/metrics_api_server.py
            echo '' >> metrics_api/metrics_api_server.py
            echo 'if __name__ == "__main__":' >> metrics_api/metrics_api_server.py
            echo '    port = int(os.getenv("METRICS_API_PORT", "8000"))' >> metrics_api/metrics_api_server.py
            echo '    uvicorn.run(app, host="0.0.0.0", port=port)' >> metrics_api/metrics_api_server.py
          fi
          
          # Copy files needed for Docker build
          echo "Copying files to Minecraft server..."
          scp -i ${{ env.SSH_KEY_PATH }} metrics_api/Dockerfile ec2-user@${{ env.MINECRAFT_IP }}:/opt/metrics-api/
          scp -i ${{ env.SSH_KEY_PATH }} metrics_api/docker-compose.yml ec2-user@${{ env.MINECRAFT_IP }}:/opt/metrics-api/
          scp -i ${{ env.SSH_KEY_PATH }} metrics_api/requirements.txt ec2-user@${{ env.MINECRAFT_IP }}:/opt/metrics-api/
          scp -i ${{ env.SSH_KEY_PATH }} metrics_api/metrics_api_server.py ec2-user@${{ env.MINECRAFT_IP }}:/opt/metrics-api/
          
          # Copy diagnostic and fix scripts if they exist
          if [ -f "metrics_api/diagnose.sh" ]; then
            echo "Copying diagnostic script..."
            scp -i ${{ env.SSH_KEY_PATH }} metrics_api/diagnose.sh ec2-user@${{ env.MINECRAFT_IP }}:/opt/metrics-api/
            ssh -i ${{ env.SSH_KEY_PATH }} ec2-user@${{ env.MINECRAFT_IP }} "chmod +x /opt/metrics-api/diagnose.sh"
          fi
          
          if [ -f "metrics_api/fix_container_detection.sh" ]; then
            echo "Copying fix script..."
            scp -i ${{ env.SSH_KEY_PATH }} metrics_api/fix_container_detection.sh ec2-user@${{ env.MINECRAFT_IP }}:/opt/metrics-api/
            ssh -i ${{ env.SSH_KEY_PATH }} ec2-user@${{ env.MINECRAFT_IP }} "chmod +x /opt/metrics-api/fix_container_detection.sh"
          fi
          
          if [ -f "metrics_api/deploy.sh" ]; then
            scp -i ${{ env.SSH_KEY_PATH }} metrics_api/deploy.sh ec2-user@${{ env.MINECRAFT_IP }}:/opt/metrics-api/
            ssh -i ${{ env.SSH_KEY_PATH }} ec2-user@${{ env.MINECRAFT_IP }} "chmod +x /opt/metrics-api/deploy.sh"
          fi
      
      # Build and start the Docker container
      - name: Build and start container
        run: |
          echo "Building and starting Docker container on Minecraft server..."
          ssh -i ${{ env.SSH_KEY_PATH }} ec2-user@${{ env.MINECRAFT_IP }} "
          cd /opt/metrics-api
          
          # Create environment file with API key
          echo 'METRICS_API_KEY=${{ env.API_KEY }}' > .env
          echo 'METRICS_API_PORT=${{ env.METRICS_API_PORT }}' >> .env
          
          # Check docker and docker-compose are installed and working
          echo 'Checking Docker installation:'
          docker --version || { echo 'Docker not installed!'; exit 1; }
          
          # Install docker-compose if not available
          if ! command -v docker-compose &> /dev/null; then
            echo 'Docker Compose not found. Installing it...'
            sudo curl -L \"https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64\" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          fi
          
          # Verify docker-compose installation
          docker-compose --version
          
          # Fix Docker socket permissions
          if [ -e \"/var/run/docker.sock\" ]; then
            echo 'Checking Docker socket permissions...'
            if ! [ -r \"/var/run/docker.sock\" ] || ! [ -w \"/var/run/docker.sock\" ]; then
              echo 'Fixing Docker socket permissions...'
              sudo chmod 666 /var/run/docker.sock
            fi
          fi
          
          # Stop any existing container
          docker-compose down || true
          
          # Check files exist
          echo 'Checking files exist:'
          ls -la
          
          # Ensure Docker socket access
          if ! grep -q '/var/run/docker.sock:/var/run/docker.sock' docker-compose.yml || grep -q '# - /var/run/docker.sock:/var/run/docker.sock' docker-compose.yml; then
            echo 'Enabling Docker socket access for container metrics...'
            sed -i 's|# - /var/run/docker.sock:/var/run/docker.sock|- /var/run/docker.sock:/var/run/docker.sock|g' docker-compose.yml
          fi
          
          # Build and start the container
          echo 'Building and starting container...'
          docker-compose up -d --build
          
          # Check if container started
          echo 'Container status:'
          docker-compose ps
          
          # Save API key to file for future reference
          echo 'API Key: ${{ env.API_KEY }}' > api_key.txt
          echo 'API URL: http://localhost:${{ env.METRICS_API_PORT }}/api/v1' >> api_key.txt
          "
      
      # Update Prefect flow if needed
      - name: Update Prefect (if Prefect IP is available)
        run: |
          # Use Prefect IP from secrets if available, fallback to Terraform output
          PREFECT_IP="${{ secrets.PREFECT_IP }}"
          
          # Try Terraform output only if secret is not set
          if [ -z "$PREFECT_IP" ]; then
            echo "No PREFECT_IP secret found, trying to get from Terraform..."
            PREFECT_IP=$(cd terraform && terraform output -raw prefect_orchestration_ip 2>/dev/null || echo "")
          else
            echo "Using PREFECT_IP from GitHub secrets"
          fi
          
          if [ -n "$PREFECT_IP" ]; then
            echo "Prefect server IP found: $PREFECT_IP"
            echo "Updating Prefect server to use the new API..."
            
            # Setup SSH key for Prefect
            ssh-keyscan -H $PREFECT_IP >> ~/.ssh/known_hosts
            
            # Copy server_monitoring_flow.py to Prefect
            scp -i ${{ env.SSH_KEY_PATH }} prefect/flows/server_monitoring_flow.py ec2-user@$PREFECT_IP:~/prefect/flows/
            
            # Update environment variables
            ssh -i ${{ env.SSH_KEY_PATH }} ec2-user@$PREFECT_IP "
            echo 'PREFECT_API_URL=http://$PREFECT_IP:4200/api' > ~/prefect/.env
            echo 'METRICS_API_URL=http://${{ env.MINECRAFT_IP }}:8000' >> ~/prefect/.env
            echo 'METRICS_API_KEY=${{ env.API_KEY }}' >> ~/prefect/.env

            # Restart Prefect to pick up new variables
            cd ~/prefect && docker-compose down && docker-compose up -d
            "

            # Wait for server to start
            sleep 10

            # Register the flow
            ssh -i ${{ env.SSH_KEY_PATH }} ec2-user@$PREFECT_IP "
            docker exec prefect-server bash -c 'cd /opt/prefect/flows && prefect deploy server_monitoring_flow.py:server_monitoring_flow -n server_monitoring_flow-deployment --pool default'
            "
            
            echo "Prefect server updated successfully!"
          else
            echo "Prefect server IP not found, skipping Prefect update"
          fi
      
      # Verify API is working and diagnose any issues
      - name: Verify API
        run: |
          echo "Waiting for API to be ready..."
          # Give the API some time to start up
          sleep 10
          
          # Check if the API is responding
          ssh -i ${{ env.SSH_KEY_PATH }} ec2-user@${{ env.MINECRAFT_IP }} "
          # Make sure docker-compose is available
          if ! command -v docker-compose &> /dev/null; then
            echo 'Docker Compose not found. Using docker commands instead.'
            # Check if container exists 
            if ! docker ps -a | grep -q minecraft-metrics-api; then
              echo 'ERROR: Container minecraft-metrics-api does not exist.'
              cd /opt/metrics-api
              echo 'Checking files in /opt/metrics-api:'
              ls -la
              echo 'Content of Dockerfile:'
              cat Dockerfile
              echo 'Content of docker-compose.yml:'
              cat docker-compose.yml
              exit 1
            fi
            
            # Check if container is running
            if ! docker ps | grep -q minecraft-metrics-api; then
              echo 'ERROR: Container minecraft-metrics-api exists but is not running:'
              docker ps -a | grep minecraft-metrics-api
              echo 'Container logs:'
              docker logs minecraft-metrics-api
              exit 1
            fi
          else
            # Using docker-compose
            cd /opt/metrics-api
            
            # Check container status
            echo 'Checking container status with docker-compose:'
            docker-compose ps
            
            # Check logs if needed
            if ! docker ps | grep -q minecraft-metrics-api; then
              echo 'Container logs:'
              docker-compose logs
              exit 1
            fi
          fi
          
          # Try to reach the health endpoint
          echo 'Testing API health endpoint...'
          for i in {1..10}; do
            if curl -s http://localhost:${{ env.METRICS_API_PORT }}/api/v1/health | grep -q healthy; then
              echo 'API is healthy!'
              # Also test the minecraft metrics endpoint
              echo 'Testing Minecraft metrics...'
              MINECRAFT_STATUS=\$(curl -s -H \"X-API-Key: ${{ env.API_KEY }}\" http://localhost:${{ env.METRICS_API_PORT }}/api/v1/minecraft/metrics | grep -o '\"status\":\"[^\"]*\"' | cut -d'\"' -f4)
              echo \"Minecraft server status reported by API: \$MINECRAFT_STATUS\"
              
              # Check if the container is running via docker
              if docker ps | grep minecraft-server | grep -q \"Up\"; then
                echo \"Docker reports: Minecraft server is running\"
                if [ \"\$MINECRAFT_STATUS\" != \"running\" ]; then
                  echo \"WARNING: API reporting '\$MINECRAFT_STATUS' but container is running!\"
                  echo \"This might indicate a permission issue or container detection problem.\"
                  
                  # Fix permissions if needed
                  if [ -f \"/opt/metrics-api/fix_container_detection.sh\" ]; then
                    echo \"Running fix script...\"
                    cd /opt/metrics-api && bash ./fix_container_detection.sh
                  fi
                else
                  echo \"SUCCESS: Container status correctly reported as running!\"
                fi
              else
                echo \"Docker reports: Minecraft server is stopped, API correctly reports '\$MINECRAFT_STATUS'\"
              fi
              
              exit 0
            fi
            echo \"Waiting for API to be ready... Attempt \$i/10\"
            sleep 2
          done
          
          echo 'API failed to respond to health checks.'
          echo 'Checking if container is running:'
          docker ps | grep minecraft-metrics-api || echo 'Container not running'
          echo 'Container logs:'
          docker logs minecraft-metrics-api || echo 'Failed to get logs'
          exit 1
          "
      
      # Update Firewall Rule if needed
      - name: Update Firewall Rule
        run: |
          echo "Ensuring Lightsail firewall allows port ${{ env.METRICS_API_PORT }} on Minecraft server..."
          
          # Try to get Minecraft instance name directly from secrets first (preferred method)
          MINECRAFT_INSTANCE_NAME="${{ secrets.MINECRAFT_INSTANCE_NAME }}"
          
          # If no instance name in secrets, try Terraform as fallback to get the Minecraft server instance name
          if [ -z "$MINECRAFT_INSTANCE_NAME" ] && [ -d "terraform" ]; then
            echo "Using Terraform to get Minecraft server instance name..."
            cd terraform
            terraform init -input=false > /dev/null
            # This should specifically get the Minecraft server instance name
            MINECRAFT_INSTANCE_NAME=$(terraform output -raw minecraft_instance_name 2>/dev/null || echo "")
            cd ..
          fi
          
          # Open port if we have an instance name
          if [ -n "$MINECRAFT_INSTANCE_NAME" ]; then
            echo "Opening port ${{ env.METRICS_API_PORT }} on Minecraft instance $MINECRAFT_INSTANCE_NAME..."
            aws lightsail open-instance-public-ports \
              --port-info fromPort=${{ env.METRICS_API_PORT }},toPort=${{ env.METRICS_API_PORT }},protocol=TCP \
              --instance-name $MINECRAFT_INSTANCE_NAME
          else
            echo "WARNING: Could not determine Minecraft server Lightsail instance name."
            echo "Please ensure port ${{ env.METRICS_API_PORT }} is open in your Minecraft server's Lightsail firewall manually."
          fi
      
      # Output success message
      - name: Success
        run: |
          echo "Metrics API deployed successfully!"
          echo "API is available at: http://${{ env.MINECRAFT_IP }}:${{ env.METRICS_API_PORT }}/api/v1/health"
          echo "API Key (first 8 chars shown): ${API_KEY:0:8}..." 